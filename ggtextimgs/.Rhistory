theme(legend.position = "none",
title = element_blank())
plot_dell_posed[[1]]+
scale_fill_viridis_c(option = "magma")+
scale_colour_viridis_c(option = "magma")+
theme_void()+
theme_dark()+
# plot.background = element_rect(fill = "black"),
theme(legend.position = "none",
title = element_blank())
plot_dell_posed[[1]]+
scale_fill_viridis_c(option = "magma")+
scale_colour_viridis_c(option = "magma")+
theme_void()+
# plot.background = element_rect(fill = "black"),
theme(legend.position = "none",
title = element_blank())
plot_dell_posed[[1]]+
scale_fill_viridis_c(option = "magma")+
scale_colour_viridis_c(option = "magma")+
theme_void()+
theme(plot.background = element_rect(fill = "black"),
legend.position = "none",
title = element_blank())
plot_dell_posed<- list()
plots[[1]]+
scale_fill_viridis_c(option = "magma")+
scale_colour_viridis_c(option = "magma")+
theme_void()+
theme(plot.background = element_rect(fill = "black"),
legend.position = "none",
title = element_blank())
plot_dell_posed$posed_c1<-
plots[[1]]+
scale_fill_viridis_c(option = "magma")+
scale_colour_viridis_c(option = "magma")+
theme_void()+
theme(plot.background = element_rect(fill = "black"),
legend.position = "none",
title = element_blank())
plots[[2]]+
scale_fill_viridis_c(option = "magma")+
scale_colour_viridis_c(option = "magma")+
theme_void()+
theme(plot.background = element_rect(fill = "black"),
legend.position = "none",
title = element_blank())
plot_dell_posed$posed_c2<-
plots[[2]]+
scale_fill_viridis_c(option = "magma")+
scale_colour_viridis_c(option = "magma")+
theme_void()+
theme(plot.background = element_rect(fill = "black"),
legend.position = "none",
title = element_blank())
plots[[3]]+
scale_fill_viridis_c(option = "magma")+
scale_colour_viridis_c(option = "magma")+
theme_void()+
theme(plot.background = element_rect(fill = "black"),
legend.position = "none",
title = element_blank())
plot_dell_posed$posed_c3<-
plots[[3]]+
scale_fill_viridis_c(option = "magma")+
scale_colour_viridis_c(option = "magma")+
theme_void()+
theme(plot.background = element_rect(fill = "black"),
legend.position = "none",
title = element_blank())
plot_dell_posed
NMF::coefmap(res_k3)
plot_dell_posed
NMF::coefmap(res_k3)
plot_dell_posed
plots_expression_posed[[1]]
plots_expression_posed[[1]]+
scale_fill_viridis_c(option = "magma")+
scale_colour_viridis_c(option = "magma")+
theme_void()+
theme(plot.background = element_rect(fill = "black"),
legend.position = "none",
title = element_blank())
#
plot_dell_posed$posed_angry<-
plots_expression_posed[[1]]+
scale_fill_viridis_c(option = "magma")+
scale_colour_viridis_c(option = "magma")+
theme_void()+
theme(plot.background = element_rect(fill = "black"),
legend.position = "none",
title = element_blank())
plots_expression_posed[[2]]
plot_dell_posed$posed_happy<-
plots_expression_posed[[2]] +
scale_fill_viridis_c(option = "magma")+
scale_colour_viridis_c(option = "magma")+
theme_void()+
theme(plot.background = element_rect(fill = "black"),
legend.position = "none",
title = element_blank())
posed_happy
plot_dell_posed$posed_happy
plots_expression_posed[[3]] +
scale_fill_viridis_c(option = "magma")+
scale_colour_viridis_c(option = "magma")+
theme_void()+
theme(plot.background = element_rect(fill = "black"),
legend.position = "none",
title = element_blank())
plots_expression_posed[[3]]
plot_dell_posed$posed_sad<-
plots_expression_posed[[3]] +
scale_fill_viridis_c(option = "magma")+
scale_colour_viridis_c(option = "magma")+
theme_void()+
theme(plot.background = element_rect(fill = "black"),
legend.position = "none",
title = element_blank())
plot_dell_posed$posed_sad
plot_dell_spoken<- list()
plot_dell_spoken<- list()
plots_spoken1_comps_spkpls[[1]]+
scale_fill_viridis_c(option = "magma")+
scale_colour_viridis_c(option = "magma")+
theme_void()+
theme(plot.background = element_rect(fill = "black"),
legend.position = "none",
title = element_blank())
plots_spoken1_comps_spkpls[[1]]
# k1 to 3 posed
plot_dell_spoken$spok_c1<-
plots_spoken1_comps_spkpls[[1]] +
scale_fill_viridis_c(option = "magma")+
scale_colour_viridis_c(option = "magma")+
theme_void()+
theme(plot.background = element_rect(fill = "black"),
legend.position = "none",
title = element_blank())
plots_spoken1_comps_spkpls[[2]]
plot_dell_spoken$spok_c2<-
plots_spoken1_comps_spkpls[[2]] +
scale_fill_viridis_c(option = "magma")+
scale_colour_viridis_c(option = "magma")+
theme_void()+
theme(plot.background = element_rect(fill = "black"),
legend.position = "none",
title = element_blank())
plot_dell_spoken$spok_c2
plots_spoken1_comps_spkpls[[3]]
plot_dell_spoken$spok_c3<-
plots_spoken1_comps_spkpls[[3]] +
scale_fill_viridis_c(option = "magma")+
scale_colour_viridis_c(option = "magma")+
theme_void()+
theme(plot.background = element_rect(fill = "black"),
legend.position = "none",
title = element_blank())
plot_dell_spoken$spok_c3
plots_expression_spk_pls[[1]]
plot_dell_spoken$spok_angry<-
plots_expression_spk_pls[[1]] +
scale_fill_viridis_c(option = "magma")+
scale_colour_viridis_c(option = "magma")+
theme_void()+
theme(plot.background = element_rect(fill = "black"),
legend.position = "none",
title = element_blank())
plot_dell_spoken$spok_angry
plots_expression_spk_pls[[2]]
plot_dell_spoken$spok_happy<-
plots_expression_spk_pls[[2]] +
scale_fill_viridis_c(option = "magma")+
scale_colour_viridis_c(option = "magma")+
theme_void()+
theme(plot.background = element_rect(fill = "black"),
legend.position = "none",
title = element_blank())
plot_dell_spoken$spok_happy
plots_expression_spk_pls[[3]]
plot_dell_spoken$spok_neutral
plot_dell_spoken$spok_neutral
plot_dell_spoken$spok_neutral <-
plots_expression_spk_pls[[3]] +
scale_fill_viridis_c(option = "magma")+
scale_colour_viridis_c(option = "magma")+
theme_void()+
theme(plot.background = element_rect(fill = "black"),
legend.position = "none",
title = element_blank())
plot_dell_spoken$spok_neutral
plots_expression_spk_pls[[4]]
plot_dell_spoken$spok_sad
plot_dell_spoken$spok_sad <-
plots_expression_spk_pls[[4]] +
scale_fill_viridis_c(option = "magma")+
scale_colour_viridis_c(option = "magma")+
theme_void()+
theme(plot.background = element_rect(fill = "black"),
legend.position = "none",
title = element_blank())
plot_dell_spoken$spok_sad
plot_dell_spoken$spok_c1
plot_dell_spoken$spok_c2
plot_dell_spoken$spok_c3
NMF::coefmap(res_k3_spoken1)
# note 1 is actialkly 2 and vice versa plots_spoken1_comps_spkpls[[2]]
plot_dell_spoken$spok_c1<-
plots_spoken1_comps_spkpls[[2]] +
scale_fill_viridis_c(option = "magma")+
scale_colour_viridis_c(option = "magma")+
theme_void()+
theme(plot.background = element_rect(fill = "black"),
legend.position = "none",
title = element_blank())
plot_dell_spoken$spok_c2<-
plots_spoken1_comps_spkpls[[1]] +
scale_fill_viridis_c(option = "magma")+
scale_colour_viridis_c(option = "magma")+
theme_void()+
theme(plot.background = element_rect(fill = "black"),
legend.position = "none",
title = element_blank())
plot_dell_posed$posed_angry
plot_dell_spoken$spok_sad
setwd("/Users/pw22812/Library/CloudStorage/GoogleDrive-helioclemente.c@gmail.com/My Drive/2022 - University Of Birmingham/HaloStudy/Github/NewGit/halo_faces2/ggtextimgs")
setwd("/Users/pw22812/Library/CloudStorage/GoogleDrive-helioclemente.c@gmail.com/My Drive/2022 - University Of Birmingham/HaloStudy/Github/NewGit/halo_faces2/ggtextimgs")
ggsave("comp1_posed.png", device = "png", plot_dell_posed$posed_c1,
width = 700,
height = 700,
units = 'px',
dpi = 500)
ggsave("comp2_posed.png", device = "png", plot_dell_posed$posed_c2,
width = 700,
height = 700,
units = 'px',
dpi = 500)
ggsave("comp3_posed.png", device = "png", plot_dell_posed$posed_c3,
width = 700,
height = 700,
units = 'px',
dpi = 500)
ggsave("ang_posed.png", device = "png", plot_dell_posed$posed_angry,
width = 700,
height = 700,
units = 'px',
dpi = 500)
ggsave("hap_posed.png", device = "png", plot_dell_posed$posed_happy,
width = 700,
height = 700,
units = 'px',
dpi = 500)
ggsave("sad_posed.png", device = "png", plot_dell_posed$posed_sad,
width = 700,
height = 700,
units = 'px',
dpi = 500)
# spoken
ggsave("comp1_spoken.png", device = "png", plot_dell_spoken$spok_c1,
width = 700,
height = 700,
units = 'px',
dpi = 500)
ggsave("comp2_spoken.png", device = "png", plot_dell_spoken$spok_c2,
width = 700,
height = 700,
units = 'px',
dpi = 500)
ggsave("comp3_spoken.png", device = "png", plot_dell_spoken$spok_c3,
width = 700,
height = 700,
units = 'px',
dpi = 500)
ggsave("ang_spoken.png", device = "png", plot_dell_spoken$spok_angry,
width = 700,
height = 700,
units = 'px',
dpi = 500)
ggsave("hap_spoken.png", device = "png", plot_dell_spoken$spok_happy,
width = 700,
height = 700,
units = 'px',
dpi = 500)
ggsave("sad_spoken.png", device = "png", plot_dell_spoken$spok_sad,
width = 700,
height = 700,
units = 'px',
dpi = 500)
ggsave("neut_spoken.png", device = "png", plot_dell_spoken$spok_neutral,
width = 700,
height = 700,
units = 'px',
dpi = 500)
saveRDS(plot_dell_posed, "plot_dell_posed.rds")
saveRDS(plot_dell_spoken, "plot_dell_spoken.rds")
save.image("~/Library/CloudStorage/GoogleDrive-helioclemente.c@gmail.com/My Drive/2022 - University Of Birmingham/HaloStudy/Data/AU-to_landm_vis.RData")
chool_talk$AU_NM
plot_dell_spoken$spok_c1
plot_dell_spoken$spok_c1
plot_dell_spoken$spok_c1
plot_dell_spoken$spok_c2
plot_dell_spoken$spok_c3
NMF::coefmap(res_k3_spoken1)
plots[[1]]
plots[[2]]
plots[[3]]
# Function to process and plot data for a given comp
process_and_plot_comp <- function(comp_number) {
# Filter data for the specific comp
comp_data <- allcomps_pred1_land %>%
filter(comp == comp_number) %>%
pivot_longer(cols = c(-frame, -comp), names_to = c(".value", "landmark"), names_pattern = "([xy])_(\\d+)") %>%
arrange(landmark, frame) %>%
group_by(landmark) %>%
mutate(y_diff = abs(diff(y)), x_diff = (diff(x)^2)) %>%
mutate(disp = sqrt(y_diff + x_diff)) %>%
summarise(across(where(is.numeric), mean, na.rm = TRUE)) %>%
ungroup()%>%
mutate(across(c(disp, y_diff, x_diff), ~ . / max(.), .names = "norm_{col}"))
# Create Delaunay triangulation
tri_comp <- triang.list(deldir(comp_data$x, comp_data$y))
# Prepare data for plotting
tri_data <- do.call(rbind, lapply(seq_along(tri_comp), function(x) {
data.frame(
x = tri_comp[[x]]$x,
y = tri_comp[[x]]$y,
comp_fill = mean(comp_data$norm_y_diff[tri_comp[[x]]$ptNum]),
tri_comp = x
)
}))
# Plot the triangles with ggplot2
ggplot(tri_data, aes(x, 1 - y)) +
geom_polygon(aes(fill = comp_fill, group = tri_comp)) +
geom_point(colour = "white", alpha = 0.1, size = 0.4) +
scale_fill_viridis_c(option = "magma") +
theme_dark() +
theme_void() +
theme(legend.position = "none") +
ggtitle(paste("Delaunay Triangulation for Comp", comp_number))
}
plots_ungr <- lapply(1:3, process_and_plot_comp)
plots_ungr[[1]]
plots_ungr[[2]]
plots_ungr[[3]]
plots[[1]]
plots[[2]]
plots[[3]]
plots_ungr[[1]]
plots_ungr[[2]]
plots_ungr[[3]]
# Function to process and plot data for a given comp
process_and_plot_comp <- function(comp_number) {
# Filter data for the specific comp
comp_data <- allcomps_pred1_land %>%
pivot_longer(cols = c(-frame, -comp), names_to = c(".value", "landmark"), names_pattern = "([xy])_(\\d+)") %>%
arrange(landmark, frame) %>%
group_by(landmark,comp) %>%
mutate(y_diff = abs(diff(y)), x_diff = (diff(x)^2)) %>%
mutate(disp = sqrt(y_diff + x_diff)) %>%
summarise(across(where(is.numeric), mean, na.rm = TRUE)) %>%
ungroup()%>%
mutate(across(c(disp, y_diff, x_diff), ~ . / max(.), .names = "norm_{col}"))%>%
filter(comp == comp_number)
# Create Delaunay triangulation
tri_comp <- triang.list(deldir(comp_data$x, comp_data$y))
# Prepare data for plotting
tri_data <- do.call(rbind, lapply(seq_along(tri_comp), function(x) {
data.frame(
x = tri_comp[[x]]$x,
y = tri_comp[[x]]$y,
comp_fill = mean(comp_data$norm_y_diff[tri_comp[[x]]$ptNum]),
tri_comp = x
)
}))
# Plot the triangles with ggplot2
ggplot(tri_data, aes(x, 1 - y)) +
geom_polygon(aes(fill = comp_fill, group = tri_comp)) +
geom_point(colour = "white", alpha = 0.1, size = 0.4) +
scale_fill_viridis_c(option = "magma") +
theme_dark() +
theme_void() +
theme(legend.position = "none") +
ggtitle(paste("Delaunay Triangulation for Comp", comp_number))
}
# Filter data for the specific expression
expression_data <- posed_pred_expr_land %>%
pivot_longer(cols = c(-frame, -expression), names_to = c(".value", "landmark"), names_pattern = "([xy])_(\\d+)") %>%
arrange(landmark, frame, expression) %>%
group_by(landmark,expression) %>%
mutate(y_diff = abs(diff(y)), x_diff = abs(diff(x))) %>%
mutate(disp = (y_diff + x_diff)/2) %>%
summarise(across(where(is.numeric), mean, na.rm = TRUE)) %>%
ungroup()%>%
mutate(across(c(disp, y_diff, x_diff), ~ . / max(.), .names = "norm_{col}"))%>%
filter(expression == expression_value) %>%
# Create Delaunay triangulation
tri_expression <- triang.list(deldir(expression_data$x, expression_data$y))
# Function to process and plot data for a given expression
process_and_plot_expression <- function(expression_value) {
# Filter data for the specific expression
expression_data <- posed_pred_expr_land %>%
pivot_longer(cols = c(-frame, -expression), names_to = c(".value", "landmark"), names_pattern = "([xy])_(\\d+)") %>%
arrange(landmark, frame, expression) %>%
group_by(landmark,expression) %>%
mutate(y_diff = abs(diff(y)), x_diff = abs(diff(x))) %>%
mutate(disp = (y_diff + x_diff)/2) %>%
summarise(across(where(is.numeric), mean, na.rm = TRUE)) %>%
ungroup()%>%
mutate(across(c(disp, y_diff, x_diff), ~ . / max(.), .names = "norm_{col}"))%>%
filter(expression == expression_value) %>%
# Create Delaunay triangulation
tri_expression <- triang.list(deldir(expression_data$x, expression_data$y))
# Prepare data for plotting
tri_data <- do.call(rbind, lapply(seq_along(tri_expression), function(x) {
data.frame(
x = tri_expression[[x]]$x,
y = tri_expression[[x]]$y,
expression_fill = mean(expression_data$norm_y_diff[tri_expression[[x]]$ptNum]),
tri_expression = x
)
}))
# Plot the triangles with ggplot2
ggplot(tri_data, aes(x, 1 - y)) +
geom_polygon(aes(fill = expression_fill, group = tri_expression)) +
geom_point(colour = "white", alpha = 0.1, size = 0.4) +
scale_fill_viridis_c(option = "magma") +
theme_dark() +
theme_void() +
theme(legend.position = "none") +
ggtitle(paste("Delaunay Triangulation for Expression", expression_value))
}
# disp computed cross emotiomns
plots_expression_posed1 <- lapply(expressions, process_and_plot_expression)
# Function to process and plot data for a given expression
process_and_plot_expression <- function(expression_value) {
# Filter data for the specific expression
expression_data <- posed_pred_expr_land %>%
pivot_longer(cols = c(-frame, -expression), names_to = c(".value", "landmark"), names_pattern = "([xy])_(\\d+)") %>%
arrange(landmark, frame, expression) %>%
group_by(landmark,expression) %>%
mutate(y_diff = abs(diff(y)), x_diff = abs(diff(x))) %>%
mutate(disp = (y_diff + x_diff)/2) %>%
summarise(across(where(is.numeric), mean, na.rm = TRUE)) %>%
ungroup()%>%
mutate(across(c(disp, y_diff, x_diff), ~ . / max(.), .names = "norm_{col}"))%>%
filter(expression == expression_value)
# Create Delaunay triangulation
tri_expression <- triang.list(deldir(expression_data$x, expression_data$y))
# Prepare data for plotting
tri_data <- do.call(rbind, lapply(seq_along(tri_expression), function(x) {
data.frame(
x = tri_expression[[x]]$x,
y = tri_expression[[x]]$y,
expression_fill = mean(expression_data$norm_y_diff[tri_expression[[x]]$ptNum]),
tri_expression = x
)
}))
# Plot the triangles with ggplot2
ggplot(tri_data, aes(x, 1 - y)) +
geom_polygon(aes(fill = expression_fill, group = tri_expression)) +
geom_point(colour = "white", alpha = 0.1, size = 0.4) +
scale_fill_viridis_c(option = "magma") +
theme_dark() +
theme_void() +
theme(legend.position = "none") +
ggtitle(paste("Delaunay Triangulation for Expression", expression_value))
}
# disp computed cross emotiomns
plots_expression_posed1 <- lapply(expressions, process_and_plot_expression)
plots_expression_posed1[[1]]
plots_expression_posed1[[2]]
plots_expression_posed1[[3]]
plots_expression_posed[[1]]
plots_expression_posed[[2]]
plots_expression_posed[[3]]
plots_expression_posed1[[1]]
plots_expression_posed1[[2]]
plots_expression_posed1[[3]]
# Function to process and plot data for a given expression
process_and_plot_expression <- function(expression_value) {
# Filter data for the specific expression
expression_data <- posed_pred_expr_land %>%
filter(expression == expression_value) %>%
pivot_longer(cols = c(-frame, -expression), names_to = c(".value", "landmark"), names_pattern = "([xy])_(\\d+)") %>%
arrange(landmark, frame) %>%
group_by(landmark) %>%
mutate(y_diff = abs(diff(y)), x_diff = abs(diff(x))) %>%
mutate(disp = (y_diff + x_diff)/2) %>%
summarise(across(where(is.numeric), mean, na.rm = TRUE)) %>%
mutate(across(c(disp, y_diff, x_diff), ~ . / max(.), .names = "norm_{col}"))
# Create Delaunay triangulation
tri_expression <- triang.list(deldir(expression_data$x, expression_data$y))
# Prepare data for plotting
tri_data <- do.call(rbind, lapply(seq_along(tri_expression), function(x) {
data.frame(
x = tri_expression[[x]]$x,
y = tri_expression[[x]]$y,
expression_fill = mean(expression_data$norm_y_diff[tri_expression[[x]]$ptNum]),
tri_expression = x
)
}))
# Plot the triangles with ggplot2
ggplot(tri_data, aes(x, 1 - y)) +
geom_polygon(aes(fill = expression_fill, group = tri_expression)) +
geom_point(colour = "white", alpha = 0.1, size = 0.4) +
scale_fill_viridis_c(option = "magma") +
theme_dark() +
theme_void() +
theme(legend.position = "none") +
ggtitle(paste("Delaunay Triangulation for Expression", expression_value))
}
save.image("~/Library/CloudStorage/GoogleDrive-helioclemente.c@gmail.com/My Drive/2022 - University Of Birmingham/HaloStudy/Data/AU-to_landm_vis.RData")
